{"ast":null,"code":"var _jsxFileName = \"/home/albert/workspace/ABB_Frontend_Assignment/abb_frontend_assignment/src/components/FeatureCard/index.js\";\nimport React, { Component } from 'react';\nimport './index.css';\nimport bbApi from '../../api/index';\nexport default class FeatureCard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      featureStatus: {}\n    };\n\n    this.randomId = () => bbApi.generateRandomKey();\n\n    this.handleRetrieveFeatureStatus = () => {\n      let featureStatus = bbApi.retrieveFeatureStatus();\n      this.setState({\n        featureStatus\n      });\n      setTimeout(() => {\n        this.handleRetrieveFeatureStatus();\n      }, 10000);\n    };\n\n    this.handldeControlSection = controls => {\n      const {\n        randomId\n      } = this;\n      return controls.map(control => {\n        const controlData = bbApi.retrieveControlData();\n        return React.createElement(\"tr\", {\n          key: `controlSection${randomId()}${randomId()}`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          key: `${control}${randomId()}`,\n          className: \"controlDataField controlDataFieldFlex\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, control), React.createElement(\"td\", {\n          key: `${controlData.controlDevData}${randomId()}`,\n          className: \"controlDataField\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, controlData.controlDevData), React.createElement(\"td\", {\n          key: `${controlData.controlDevOutToolData}${randomId()}`,\n          className: \"controlDataField\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, controlData.controlDevOutToolData), React.createElement(\"td\", {\n          key: `${controlData.controlStatusData}${randomId()}image${randomId()}`,\n          className: \"controlDataField\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"controlDataIcon\",\n          alt: 'controlStatusIcon',\n          src: require(`../../images/${controlData.controlStatusData === 0 ? 'okIcon.svg' : controlData.controlStatusData === 1 ? 'alertIcon.svg' : 'errorIcon.svg'}`),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        })));\n      });\n    };\n  }\n\n  componentDidMount() {\n    const featureStatus = bbApi.retrieveFeatureStatus();\n    this.setState({\n      featureStatus\n    });\n    this.handleRetrieveFeatureStatus();\n  }\n\n  render() {\n    const {\n      handldeControlSection,\n      randomId\n    } = this;\n    const {\n      featureStatus\n    } = this.state;\n    const {\n      featureTitle,\n      controls\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"featureContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: `featureTitleContainer ${featureStatus === 0 ? \" goodState\" : featureStatus === 1 ? \" alertState\" : \" errorState\"}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"featureTitleContainerIcon\",\n      alt: \"circleIcon\",\n      src: require('../../images/circleIcon.svg'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"featureTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, featureTitle), React.createElement(\"img\", {\n      className: \"featureTitleContainerIcon\",\n      alt: \"statusIcon\",\n      src: require(`../../images/${featureStatus === 0 ? \"okIcon.svg\" : featureStatus === 1 ? \"alertIcon.svg\" : \"errorIcon.svg\"}`),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    })), React.createElement(\"table\", {\n      className: \"measuresContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      key: `controlTitles${randomId()}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      key: `ControlTitle${randomId()}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Control\"), React.createElement(\"th\", {\n      key: `Dev${randomId()}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Dev\"), React.createElement(\"th\", {\n      key: `DevOut${randomId()}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Dev Out Tool\"), React.createElement(\"th\", {\n      key: `controlStatus${randomId()}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, handldeControlSection(controls))));\n  }\n\n}","map":{"version":3,"sources":["/home/albert/workspace/ABB_Frontend_Assignment/abb_frontend_assignment/src/components/FeatureCard/index.js"],"names":["React","Component","bbApi","FeatureCard","state","featureStatus","randomId","generateRandomKey","handleRetrieveFeatureStatus","retrieveFeatureStatus","setState","setTimeout","handldeControlSection","controls","map","control","controlData","retrieveControlData","controlDevData","controlDevOutToolData","controlStatusData","require","componentDidMount","render","featureTitle","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './index.css'\nimport bbApi from '../../api/index'\nexport default class FeatureCard extends Component {\n    state = {\n        featureStatus: {}\n\n    }\n\n    componentDidMount() {\n        const featureStatus = bbApi.retrieveFeatureStatus();\n        this.setState({ featureStatus })\n        this.handleRetrieveFeatureStatus();\n    }\n\n    randomId = () => bbApi.generateRandomKey()\n\n\n    handleRetrieveFeatureStatus = () => {\n        let featureStatus = bbApi.retrieveFeatureStatus();\n        this.setState({ featureStatus });\n        setTimeout(() => {\n            this.handleRetrieveFeatureStatus();\n        }, 10000)\n    }\n\n    handldeControlSection = (controls) => {\n        const {randomId}=this\n        return (controls.map(control => {\n            const controlData = bbApi.retrieveControlData()\n            return <tr key={`controlSection${randomId()}${randomId()}`}>\n                <td key={`${control}${randomId()}`} className=\"controlDataField controlDataFieldFlex\">{control}</td>\n                <td key={`${controlData.controlDevData}${randomId()}`} className=\"controlDataField\">{controlData.controlDevData}</td>\n                <td key={`${controlData.controlDevOutToolData}${randomId()}`} className=\"controlDataField\">{controlData.controlDevOutToolData}</td>\n                <td key={`${controlData.controlStatusData}${randomId()}image${randomId()}`} className=\"controlDataField\"><img className=\"controlDataIcon\" alt={'controlStatusIcon'} src={require(`../../images/${controlData.controlStatusData === 0 ? 'okIcon.svg' : controlData.controlStatusData === 1 ? 'alertIcon.svg' : 'errorIcon.svg'}`)}></img></td>\n            </tr>\n        }))\n    }\n\n\n    render() {\n        const { handldeControlSection, randomId } = this\n        const { featureStatus } = this.state\n        const { featureTitle, controls } = this.props\n\n        return (\n            <div className=\"featureContainer\">\n                <div className={`featureTitleContainer ${featureStatus === 0 ? \" goodState\" : featureStatus === 1 ? \" alertState\" : \" errorState\"}`}>\n                    <img className=\"featureTitleContainerIcon\" alt=\"circleIcon\" src={require('../../images/circleIcon.svg')} ></img>\n                    <div className=\"featureTitle\">{featureTitle}</div>\n                    <img className=\"featureTitleContainerIcon\" alt=\"statusIcon\" src={require(`../../images/${featureStatus === 0 ? \"okIcon.svg\" : featureStatus === 1 ? \"alertIcon.svg\" : \"errorIcon.svg\"}`)} ></img>\n                </div>\n                <table className=\"measuresContainer\">\n                    <thead>\n                        <tr key={`controlTitles${randomId()}`}>\n                            <th key={`ControlTitle${randomId()}`}>Control</th>\n                            <th key={`Dev${randomId()}`}>Dev</th>\n                            <th key={`DevOut${randomId()}`}>Dev Out Tool</th>\n                            <th key={`controlStatus${randomId()}`}></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {handldeControlSection(controls)}\n                    </tbody>\n\n                </table>\n            </div >\n        )\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}